// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: app/protos/accountService.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AccountServiceV1Client is the client API for AccountServiceV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountServiceV1Client interface {
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponce, error)
	RequestAccountVerificationToken(ctx context.Context, in *VerificationTokenRequest, opts ...grpc.CallOption) (*VerificationTokenResponce, error)
	VerifyAccount(ctx context.Context, in *VerifyAccountRequest, opts ...grpc.CallOption) (*VerifyAccountResponce, error)
	SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*AccessResponce, error)
	RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshAccessTokenResponce, error)
	GetAccountID(ctx context.Context, in *AccessToken, opts ...grpc.CallOption) (*AccountID, error)
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponce, error)
	RequestChangePasswordToken(ctx context.Context, in *ChangePasswordTokenRequest, opts ...grpc.CallOption) (*ChangePasswordToken, error)
	ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordResponce, error)
}

type accountServiceV1Client struct {
	cc grpc.ClientConnInterface
}

func NewAccountServiceV1Client(cc grpc.ClientConnInterface) AccountServiceV1Client {
	return &accountServiceV1Client{cc}
}

func (c *accountServiceV1Client) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponce, error) {
	out := new(CreateAccountResponce)
	err := c.cc.Invoke(ctx, "/account_service.accountServiceV1/CreateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceV1Client) RequestAccountVerificationToken(ctx context.Context, in *VerificationTokenRequest, opts ...grpc.CallOption) (*VerificationTokenResponce, error) {
	out := new(VerificationTokenResponce)
	err := c.cc.Invoke(ctx, "/account_service.accountServiceV1/RequestAccountVerificationToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceV1Client) VerifyAccount(ctx context.Context, in *VerifyAccountRequest, opts ...grpc.CallOption) (*VerifyAccountResponce, error) {
	out := new(VerifyAccountResponce)
	err := c.cc.Invoke(ctx, "/account_service.accountServiceV1/VerifyAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceV1Client) SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*AccessResponce, error) {
	out := new(AccessResponce)
	err := c.cc.Invoke(ctx, "/account_service.accountServiceV1/SignIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceV1Client) RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshAccessTokenResponce, error) {
	out := new(RefreshAccessTokenResponce)
	err := c.cc.Invoke(ctx, "/account_service.accountServiceV1/RefreshToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceV1Client) GetAccountID(ctx context.Context, in *AccessToken, opts ...grpc.CallOption) (*AccountID, error) {
	out := new(AccountID)
	err := c.cc.Invoke(ctx, "/account_service.accountServiceV1/GetAccountID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceV1Client) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponce, error) {
	out := new(LogoutResponce)
	err := c.cc.Invoke(ctx, "/account_service.accountServiceV1/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceV1Client) RequestChangePasswordToken(ctx context.Context, in *ChangePasswordTokenRequest, opts ...grpc.CallOption) (*ChangePasswordToken, error) {
	out := new(ChangePasswordToken)
	err := c.cc.Invoke(ctx, "/account_service.accountServiceV1/RequestChangePasswordToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceV1Client) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordResponce, error) {
	out := new(ChangePasswordResponce)
	err := c.cc.Invoke(ctx, "/account_service.accountServiceV1/ChangePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountServiceV1Server is the server API for AccountServiceV1 service.
// All implementations must embed UnimplementedAccountServiceV1Server
// for forward compatibility
type AccountServiceV1Server interface {
	CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponce, error)
	RequestAccountVerificationToken(context.Context, *VerificationTokenRequest) (*VerificationTokenResponce, error)
	VerifyAccount(context.Context, *VerifyAccountRequest) (*VerifyAccountResponce, error)
	SignIn(context.Context, *SignInRequest) (*AccessResponce, error)
	RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshAccessTokenResponce, error)
	GetAccountID(context.Context, *AccessToken) (*AccountID, error)
	Logout(context.Context, *LogoutRequest) (*LogoutResponce, error)
	RequestChangePasswordToken(context.Context, *ChangePasswordTokenRequest) (*ChangePasswordToken, error)
	ChangePassword(context.Context, *ChangePasswordRequest) (*ChangePasswordResponce, error)
	mustEmbedUnimplementedAccountServiceV1Server()
}

// UnimplementedAccountServiceV1Server must be embedded to have forward compatible implementations.
type UnimplementedAccountServiceV1Server struct {
}

func (UnimplementedAccountServiceV1Server) CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedAccountServiceV1Server) RequestAccountVerificationToken(context.Context, *VerificationTokenRequest) (*VerificationTokenResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestAccountVerificationToken not implemented")
}
func (UnimplementedAccountServiceV1Server) VerifyAccount(context.Context, *VerifyAccountRequest) (*VerifyAccountResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyAccount not implemented")
}
func (UnimplementedAccountServiceV1Server) SignIn(context.Context, *SignInRequest) (*AccessResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignIn not implemented")
}
func (UnimplementedAccountServiceV1Server) RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshAccessTokenResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedAccountServiceV1Server) GetAccountID(context.Context, *AccessToken) (*AccountID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountID not implemented")
}
func (UnimplementedAccountServiceV1Server) Logout(context.Context, *LogoutRequest) (*LogoutResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedAccountServiceV1Server) RequestChangePasswordToken(context.Context, *ChangePasswordTokenRequest) (*ChangePasswordToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestChangePasswordToken not implemented")
}
func (UnimplementedAccountServiceV1Server) ChangePassword(context.Context, *ChangePasswordRequest) (*ChangePasswordResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedAccountServiceV1Server) mustEmbedUnimplementedAccountServiceV1Server() {}

// UnsafeAccountServiceV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountServiceV1Server will
// result in compilation errors.
type UnsafeAccountServiceV1Server interface {
	mustEmbedUnimplementedAccountServiceV1Server()
}

func RegisterAccountServiceV1Server(s grpc.ServiceRegistrar, srv AccountServiceV1Server) {
	s.RegisterService(&AccountServiceV1_ServiceDesc, srv)
}

func _AccountServiceV1_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceV1Server).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account_service.accountServiceV1/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceV1Server).CreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountServiceV1_RequestAccountVerificationToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerificationTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceV1Server).RequestAccountVerificationToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account_service.accountServiceV1/RequestAccountVerificationToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceV1Server).RequestAccountVerificationToken(ctx, req.(*VerificationTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountServiceV1_VerifyAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceV1Server).VerifyAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account_service.accountServiceV1/VerifyAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceV1Server).VerifyAccount(ctx, req.(*VerifyAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountServiceV1_SignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceV1Server).SignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account_service.accountServiceV1/SignIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceV1Server).SignIn(ctx, req.(*SignInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountServiceV1_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceV1Server).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account_service.accountServiceV1/RefreshToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceV1Server).RefreshToken(ctx, req.(*RefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountServiceV1_GetAccountID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceV1Server).GetAccountID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account_service.accountServiceV1/GetAccountID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceV1Server).GetAccountID(ctx, req.(*AccessToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountServiceV1_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceV1Server).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account_service.accountServiceV1/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceV1Server).Logout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountServiceV1_RequestChangePasswordToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceV1Server).RequestChangePasswordToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account_service.accountServiceV1/RequestChangePasswordToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceV1Server).RequestChangePasswordToken(ctx, req.(*ChangePasswordTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountServiceV1_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceV1Server).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account_service.accountServiceV1/ChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceV1Server).ChangePassword(ctx, req.(*ChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountServiceV1_ServiceDesc is the grpc.ServiceDesc for AccountServiceV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountServiceV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "account_service.accountServiceV1",
	HandlerType: (*AccountServiceV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAccount",
			Handler:    _AccountServiceV1_CreateAccount_Handler,
		},
		{
			MethodName: "RequestAccountVerificationToken",
			Handler:    _AccountServiceV1_RequestAccountVerificationToken_Handler,
		},
		{
			MethodName: "VerifyAccount",
			Handler:    _AccountServiceV1_VerifyAccount_Handler,
		},
		{
			MethodName: "SignIn",
			Handler:    _AccountServiceV1_SignIn_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _AccountServiceV1_RefreshToken_Handler,
		},
		{
			MethodName: "GetAccountID",
			Handler:    _AccountServiceV1_GetAccountID_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _AccountServiceV1_Logout_Handler,
		},
		{
			MethodName: "RequestChangePasswordToken",
			Handler:    _AccountServiceV1_RequestChangePasswordToken_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _AccountServiceV1_ChangePassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/protos/accountService.proto",
}
