syntax= "proto3";

package account_service;
import "messages.proto";
option go_package = "account_service/v1/protos";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "google/protobuf/empty.proto";


option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    schemes: HTTP;
    //schemes: HTTPS;
    consumes: "application/json";
    produces: "application/json";

    info: {
        title: "Account service";
        version: "1.0";
        contact: {
            name: "Falokut";
            url: "https://github.com/Falokut";
            email: "timur.sinelnik@yandex.ru";
        };
    }
    responses: {
        key: "403"
            value: {
                description: "Returned when the user does not have permission to access the resource."
                schema: {
                    json_schema: {
                        type: STRING;
                    }
                }
            }
    };
    responses: {
		key: "404";
		value: {
			description: "Returned when the resource does not exist.";
			schema: {
				json_schema: {
					ref: "#/definitions/rpcStatus";
				}
			}
		}
	}
    responses: {
		key: "500";
		value: {
			description: "Something went wrong.";
			schema: {
				json_schema: {
					ref: "#/definitions/rpcStatus";
				}
			}
		}
	}
};

service accountServiceV1 {
    rpc CreateAccount(CreateAccountRequest) returns(google.protobuf.Empty){
        option (google.api.http) = {
            post: "/v1/create-account"
            body: "*" 
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            responses: {
                key: "400"
                    value: {
                        description: "Returned when specified params is not valid or account with this email alredy exist."
                    }
            };
        };
    }
     
    // Sending message into email queue with account verification token
    rpc RequestAccountVerificationToken(VerificationTokenRequest) returns(google.protobuf.Empty){
        option (google.api.http) = {
            get: "/v1/verfification/request"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            responses: {
                key: "400";
                value: {
                    description: "Returned when account with specified email alredy exist or email is not valid";
                }
            };
        };
    }

    rpc VerifyAccount(VerifyAccountRequest) returns(google.protobuf.Empty){
        option (google.api.http) = {
            post: "/v1/verify/{VerificationToken}"
            body: "*" 
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            responses: {
                key: "400"
                    value: {
                        description: "Returned when has wrong token."
                    }
            };
            responses: {
                key: "404"
                    value: {
                        description: "Returned when account with specified email in token not found."
                    }
            }; 
        };
    }

    rpc SignIn(SignInRequest) returns(AccessResponce){
        option (google.api.http) = {
            post: "/v1/sign-in"
            body: "*" 
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            responses: {
                key: "400"
                    value: {
                        description: "Returned when specified password is not an account password."
                    }
            };
            responses: {
                key: "404"
                    value: {
                        description: "Returned when account with specified email not found."
                    }
            };
            parameters: {
                headers: {
                    name: "client_ip";
                    description: "IP address of the user's client.";
                    type: STRING;
                    required: true; 
                };
            }; 
        };
    }

    rpc GetAccountID(google.protobuf.Empty) returns(AccountID){
        option (google.api.http) = { get: "/v1/account-id" };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            parameters: {
                headers: {
                    name: "session_id";
                    description: "ID of the session issued when logging in to the account";
                    type: STRING;
                    required: true; 
                };
                headers: {
                    name: "client_ip";
                    description: "IP address of the user's client";
                    type: STRING;
                    required: true; 
                };
            };

            responses: {
                key: "400"
                    value: {
                        description: "Returned when has problem with parameters in headers."
                    }
            };
            responses: {
                key: "401"
                    value: {
                        description: "Returned when session_id not found in header params."
                    }
            };
            responses: {
                key: "404"
                    value: {
                        description: "Returned when session with specified id not found."
                    }
            }; 
        };
    } 

    rpc Logout(google.protobuf.Empty) returns(google.protobuf.Empty){
        option (google.api.http) = {
            post: "/v1/logout"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            responses: {
                key: "400"
                    value: {
                        description: "Returned when has problem with parameters in headers."
                    }
            };
            responses: {
                key: "401"
                    value: {
                        description: "Returned when session_id not found in header params."
                    }
            };
            responses: {
                key: "404"
                    value: {
                        description: "Returned when session with specified id not found."
                    }
            }; 
        };
    }


    // Sending message into email queue with change password token
    rpc RequestChangePasswordToken(ChangePasswordTokenRequest) returns(google.protobuf.Empty){
        option (google.api.http) = {
            get: "/v1/change-password/request"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            responses: {
                key: "404";
                value: {
                    description: "Returned when account with specified email doesn't exist.";
                }
            };
        };
    }

    rpc ChangePassword(ChangePasswordRequest) returns(google.protobuf.Empty){
        option (google.api.http) = {
            post: "/v1/change-password"
            body: "*" 
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            responses: {
                key: "400"
                    value: {
                        description: "Returned when has wrong token or specified password not valid."
                    }
            };
            responses: {
                key: "404"
                    value: {
                        description: "Returned when specified account with email in token not found."
                    }
            }; 
        };
    }

    rpc GetAllSessions(google.protobuf.Empty) returns(AllSessionsResponce){
        option (google.api.http) = {get: "/v1/sessions"};
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            responses: {
                key: "400"
                    value: {
                        description: "Returned when has problem with parameters in headers."
                    }
            };
            responses: {
                key: "401"
                    value: {
                        description: "Returned when session_id not found in header params."
                    }
            };
            responses: {
                key: "404"
                    value: {
                        description: "Returned when session with specified id not found."
                    }
            }; 

            parameters: {
                headers: {
                    name: "session_id";
                    description: "ID of the session issued when logging in to the account.";
                    type: STRING;
                    required: true; 
                };
                headers: {
                    name: "client_ip";
                    description: "IP address of the user's client.";
                    type: STRING;
                    required: true; 
                };
            };
        };
    };     

    rpc TerminateSessions(TerminateSessionsRequest) returns(google.protobuf.Empty){
        option (google.api.http) = { post: "/v1/sessions/terminate" };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            parameters: {
                headers: {
                    name: "session_id";
                    description: "ID of the session issued when logging in to the account";
                    type: STRING;
                    required: true; 
                };
                headers: {
                    name: "client_ip";
                    description: "IP address of the user's client";
                    type: STRING;
                    required: true; 
                };
            }
            responses: {
                key: "400"
                    value: {
                        description: "Returned when has problem with parameters in headers."
                    }
            };
            responses: {
                key: "401"
                    value: {
                        description: "Returned when session_id not found in header params."
                    }
            };
            responses: {
                key: "404"
                    value: {
                        description: "Returned when session with specified id not found"
                    }
            }; 
        };
    }


    rpc DeleteAccount(google.protobuf.Empty) returns(google.protobuf.Empty){
        option (google.api.http) = { post: "/v1/account/delete" };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            parameters: {
                headers: {
                    name: "session_id";
                    description: "ID of the session issued when logging in to the account";
                    type: STRING;
                    required: true; 
                };
                headers: {
                    name: "client_ip";
                    description: "IP address of the user's client";
                    type: STRING;
                    required: true; 
                };
            }
            responses: {
                key: "400"
                    value: {
                        description: "Returned when has problem with parameters in headers."
                    }
            };
            responses: {
                key: "401"
                    value: {
                        description: "Returned when session_id not found in header params."
                    }
            };
            responses: {
                key: "404"
                    value: {
                        description: "Returned when account with specified id not found"
                    }
            }; 
        };
    }

}