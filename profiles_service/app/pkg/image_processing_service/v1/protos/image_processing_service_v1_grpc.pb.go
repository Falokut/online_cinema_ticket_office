// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: image_processing_service_v1.proto

package protos

import (
	context "context"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ImageProcessingServiceV1Client is the client API for ImageProcessingServiceV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImageProcessingServiceV1Client interface {
	Crop(ctx context.Context, in *CropRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	Resize(ctx context.Context, in *ResizeRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	Validate(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidateResponce, error)
	Desaturate(ctx context.Context, in *Image, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	Hue(ctx context.Context, in *HueRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	Blur(ctx context.Context, in *BlurRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
}

type imageProcessingServiceV1Client struct {
	cc grpc.ClientConnInterface
}

func NewImageProcessingServiceV1Client(cc grpc.ClientConnInterface) ImageProcessingServiceV1Client {
	return &imageProcessingServiceV1Client{cc}
}

func (c *imageProcessingServiceV1Client) Crop(ctx context.Context, in *CropRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, "/image_processing_service.ImageProcessingServiceV1/Crop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageProcessingServiceV1Client) Resize(ctx context.Context, in *ResizeRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, "/image_processing_service.ImageProcessingServiceV1/Resize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageProcessingServiceV1Client) Validate(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidateResponce, error) {
	out := new(ValidateResponce)
	err := c.cc.Invoke(ctx, "/image_processing_service.ImageProcessingServiceV1/Validate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageProcessingServiceV1Client) Desaturate(ctx context.Context, in *Image, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, "/image_processing_service.ImageProcessingServiceV1/Desaturate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageProcessingServiceV1Client) Hue(ctx context.Context, in *HueRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, "/image_processing_service.ImageProcessingServiceV1/Hue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageProcessingServiceV1Client) Blur(ctx context.Context, in *BlurRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, "/image_processing_service.ImageProcessingServiceV1/Blur", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImageProcessingServiceV1Server is the server API for ImageProcessingServiceV1 service.
// All implementations must embed UnimplementedImageProcessingServiceV1Server
// for forward compatibility
type ImageProcessingServiceV1Server interface {
	Crop(context.Context, *CropRequest) (*httpbody.HttpBody, error)
	Resize(context.Context, *ResizeRequest) (*httpbody.HttpBody, error)
	Validate(context.Context, *ValidateRequest) (*ValidateResponce, error)
	Desaturate(context.Context, *Image) (*httpbody.HttpBody, error)
	Hue(context.Context, *HueRequest) (*httpbody.HttpBody, error)
	Blur(context.Context, *BlurRequest) (*httpbody.HttpBody, error)
	mustEmbedUnimplementedImageProcessingServiceV1Server()
}

// UnimplementedImageProcessingServiceV1Server must be embedded to have forward compatible implementations.
type UnimplementedImageProcessingServiceV1Server struct {
}

func (UnimplementedImageProcessingServiceV1Server) Crop(context.Context, *CropRequest) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Crop not implemented")
}
func (UnimplementedImageProcessingServiceV1Server) Resize(context.Context, *ResizeRequest) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Resize not implemented")
}
func (UnimplementedImageProcessingServiceV1Server) Validate(context.Context, *ValidateRequest) (*ValidateResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validate not implemented")
}
func (UnimplementedImageProcessingServiceV1Server) Desaturate(context.Context, *Image) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Desaturate not implemented")
}
func (UnimplementedImageProcessingServiceV1Server) Hue(context.Context, *HueRequest) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hue not implemented")
}
func (UnimplementedImageProcessingServiceV1Server) Blur(context.Context, *BlurRequest) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Blur not implemented")
}
func (UnimplementedImageProcessingServiceV1Server) mustEmbedUnimplementedImageProcessingServiceV1Server() {
}

// UnsafeImageProcessingServiceV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImageProcessingServiceV1Server will
// result in compilation errors.
type UnsafeImageProcessingServiceV1Server interface {
	mustEmbedUnimplementedImageProcessingServiceV1Server()
}

func RegisterImageProcessingServiceV1Server(s grpc.ServiceRegistrar, srv ImageProcessingServiceV1Server) {
	s.RegisterService(&ImageProcessingServiceV1_ServiceDesc, srv)
}

func _ImageProcessingServiceV1_Crop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CropRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageProcessingServiceV1Server).Crop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/image_processing_service.ImageProcessingServiceV1/Crop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageProcessingServiceV1Server).Crop(ctx, req.(*CropRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageProcessingServiceV1_Resize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageProcessingServiceV1Server).Resize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/image_processing_service.ImageProcessingServiceV1/Resize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageProcessingServiceV1Server).Resize(ctx, req.(*ResizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageProcessingServiceV1_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageProcessingServiceV1Server).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/image_processing_service.ImageProcessingServiceV1/Validate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageProcessingServiceV1Server).Validate(ctx, req.(*ValidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageProcessingServiceV1_Desaturate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Image)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageProcessingServiceV1Server).Desaturate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/image_processing_service.ImageProcessingServiceV1/Desaturate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageProcessingServiceV1Server).Desaturate(ctx, req.(*Image))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageProcessingServiceV1_Hue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageProcessingServiceV1Server).Hue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/image_processing_service.ImageProcessingServiceV1/Hue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageProcessingServiceV1Server).Hue(ctx, req.(*HueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageProcessingServiceV1_Blur_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlurRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageProcessingServiceV1Server).Blur(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/image_processing_service.ImageProcessingServiceV1/Blur",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageProcessingServiceV1Server).Blur(ctx, req.(*BlurRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ImageProcessingServiceV1_ServiceDesc is the grpc.ServiceDesc for ImageProcessingServiceV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImageProcessingServiceV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "image_processing_service.ImageProcessingServiceV1",
	HandlerType: (*ImageProcessingServiceV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Crop",
			Handler:    _ImageProcessingServiceV1_Crop_Handler,
		},
		{
			MethodName: "Resize",
			Handler:    _ImageProcessingServiceV1_Resize_Handler,
		},
		{
			MethodName: "Validate",
			Handler:    _ImageProcessingServiceV1_Validate_Handler,
		},
		{
			MethodName: "Desaturate",
			Handler:    _ImageProcessingServiceV1_Desaturate_Handler,
		},
		{
			MethodName: "Hue",
			Handler:    _ImageProcessingServiceV1_Hue_Handler,
		},
		{
			MethodName: "Blur",
			Handler:    _ImageProcessingServiceV1_Blur_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "image_processing_service_v1.proto",
}
