// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: profiles_service_v1.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProfileServiceV1Client is the client API for ProfileServiceV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProfileServiceV1Client interface {
	GetUserProfile(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetUserProfileResponce, error)
	UpdateProfilePicture(ctx context.Context, in *UpdateProfilePictureRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteProfilePicture(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type profileServiceV1Client struct {
	cc grpc.ClientConnInterface
}

func NewProfileServiceV1Client(cc grpc.ClientConnInterface) ProfileServiceV1Client {
	return &profileServiceV1Client{cc}
}

func (c *profileServiceV1Client) GetUserProfile(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetUserProfileResponce, error) {
	out := new(GetUserProfileResponce)
	err := c.cc.Invoke(ctx, "/profiles_service.profileServiceV1/GetUserProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceV1Client) UpdateProfilePicture(ctx context.Context, in *UpdateProfilePictureRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/profiles_service.profileServiceV1/UpdateProfilePicture", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceV1Client) DeleteProfilePicture(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/profiles_service.profileServiceV1/DeleteProfilePicture", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProfileServiceV1Server is the server API for ProfileServiceV1 service.
// All implementations must embed UnimplementedProfileServiceV1Server
// for forward compatibility
type ProfileServiceV1Server interface {
	GetUserProfile(context.Context, *emptypb.Empty) (*GetUserProfileResponce, error)
	UpdateProfilePicture(context.Context, *UpdateProfilePictureRequest) (*emptypb.Empty, error)
	DeleteProfilePicture(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedProfileServiceV1Server()
}

// UnimplementedProfileServiceV1Server must be embedded to have forward compatible implementations.
type UnimplementedProfileServiceV1Server struct {
}

func (UnimplementedProfileServiceV1Server) GetUserProfile(context.Context, *emptypb.Empty) (*GetUserProfileResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserProfile not implemented")
}
func (UnimplementedProfileServiceV1Server) UpdateProfilePicture(context.Context, *UpdateProfilePictureRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProfilePicture not implemented")
}
func (UnimplementedProfileServiceV1Server) DeleteProfilePicture(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProfilePicture not implemented")
}
func (UnimplementedProfileServiceV1Server) mustEmbedUnimplementedProfileServiceV1Server() {}

// UnsafeProfileServiceV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProfileServiceV1Server will
// result in compilation errors.
type UnsafeProfileServiceV1Server interface {
	mustEmbedUnimplementedProfileServiceV1Server()
}

func RegisterProfileServiceV1Server(s grpc.ServiceRegistrar, srv ProfileServiceV1Server) {
	s.RegisterService(&ProfileServiceV1_ServiceDesc, srv)
}

func _ProfileServiceV1_GetUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceV1Server).GetUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profiles_service.profileServiceV1/GetUserProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceV1Server).GetUserProfile(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileServiceV1_UpdateProfilePicture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProfilePictureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceV1Server).UpdateProfilePicture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profiles_service.profileServiceV1/UpdateProfilePicture",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceV1Server).UpdateProfilePicture(ctx, req.(*UpdateProfilePictureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileServiceV1_DeleteProfilePicture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceV1Server).DeleteProfilePicture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profiles_service.profileServiceV1/DeleteProfilePicture",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceV1Server).DeleteProfilePicture(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ProfileServiceV1_ServiceDesc is the grpc.ServiceDesc for ProfileServiceV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProfileServiceV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "profiles_service.profileServiceV1",
	HandlerType: (*ProfileServiceV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserProfile",
			Handler:    _ProfileServiceV1_GetUserProfile_Handler,
		},
		{
			MethodName: "UpdateProfilePicture",
			Handler:    _ProfileServiceV1_UpdateProfilePicture_Handler,
		},
		{
			MethodName: "DeleteProfilePicture",
			Handler:    _ProfileServiceV1_DeleteProfilePicture_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "profiles_service_v1.proto",
}
